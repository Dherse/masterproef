#import "../elems/acronyms.typ": *

= Introduction <intro>

Photonic integrated circuits have become a major industry in the past few years. However, photonic circuit design is still difficult and slow, requiring a lot of expertise and time. This work aims at providing a new way of designing photonic circuits, using code, and a new way of simulating them, using a novel simulation paradigm. This will allow for the rapid prototyping and iteration of photonic circuits, as well as the co-simulation of photonic circuits with other components of a system, such as digital electronics. This thesis will focus on its applicability to the field of programmable photonics, and especially recirculating programmable photonics. However, the concepts and ideas presented in this work are applicable to the broader field of photonic circuit design.

To enable rapid development and prototyping, several teams around the world, including at the @prg, have been researching ways of creating so-called photonic processors: devices that are generic enough to be reconfigured to meet a variety of use cases. These devices are generally based on the concept of recirculating meshes, which allow the designer to create all kinds of different circuits by simply changing the configuration of the mesh #cite("bogaerts_programmable_2020"). As such, these devices are often referred to as programmable @pic[s]. These devices were used as inspirations, and will be used as demonstration platforms, for the work and mockups presented in this thesis.

This thesis merges aspects from several disciplines, most notably photonics and computer science. As such, it will first introduce the photonic background required for the understanding of this thesis, following by an in-depth analysis of the computer science concepts and paradigms discussed in this thesis. This analysis will allow for comparison of existing languages, paradigms, and techniques, which will lead to the development of a novel solution for photonic circuit design. Then, a discussion on the translation of the user's intent, and the requirements that must be met to effectively translate this intent will be presented. Finally, a discussion of the language created as part of this thesis: #gloss("phos", short: true) will be presented, as well as a set of examples showing its effectiveness and simulation capabilities. However, first, the scientific motivation for this work will be presented.

== Motivation <motivation>

This section serves as the motivation for the research and development of appropriate abstractions and tools for the design of photonic circuits, especially as it pertains to the programming of so-called photonic @fpga[s] #cite("bogaerts_programmable_2020-1") or photonic processors. As with all other types of circuit designs, such as digital electronic circuits, analog electronic circuits and RF circuits, appropriate abstractions can allow the designer to focus on the functionality of their design rather than the implementation #cite("geiger_vlsi_1990"). One may draw parallels between the abstraction levels used when designing circuits and the abstractions used when designing software. Most notably the distinction made in the software-engineering world between imperative and declarative programming. The former is concerned with the "how" of the program while the latter is focused on the "what" of the program #cite("noauthor_imperative_2020").

At a sufficiently high level of abstraction, the designer is no longer focusing on the implementation details (imperative) of their design, but rather on the functionality and behavioural expectations of their design (declarative) #cite("noauthor_imperative_2020"). In turn, this allows the designer to focus on what truly matters to them: the functionality of their design.

Currently, a lot of the work being done, on photonic circuits, is done at a very low level of abstraction, close to the component-level #cite("bogaerts_silicon_2018"). This leads to several issues for broader access to the fields of photonic circuit design. Firstly, it requires expertise and understanding of the photonic component, their physics and the, sometimes complex, relationship between all of their design parameters. Secondly, it requires a large amount of time and effort to design and simulate a photonic circuit. Physical simulation of photonic circuit is generally slow #cite("bogaerts_silicon_2018", "alerstam_parallel_2008"), which has led to efforts to simulate photonic circuits using @spice #cite("ye_spice-compatible_2022"). Finally, the design and implementation of photonic circuits is generally expensive, requiring taping-out of the design and working with a foundry for fabrication. This increases the cost, but also increases the time to market for the product #cite("bogaerts_programmable_2020").

This therefore means, that there is a large interest in constructing new abstractions, method of simulation and design tools for photonic circuits. Especially for rapid prototyping and iteration of photonic circuits. This is the reason that research in the field of programmable photonics, and especially recirculating programmable photonics has had growing interest in the past few years. This master's thesis has for purpose to find new ways in which the user can easily design their photonic circuit and program them onto those programmable @pic[s] #cite("bogaerts_programmable_2020").

Additionally, photonic circuits are often not the only component in a system. They are often used in conjunction with other technologies, such as analog electronics, used in driving the photonic components, digital electronic, to provide control and feedback loops and @rf to benefit from the high bandwidth, high speed capabilities of photonics #cite("marpaung_integrated_2019"). Therefore, it is of interest to the user to co-simulate #cite("bogaerts_silicon_2018", "sorace-agaskar_electro-optical_2015") their photonic circuits with the other components of their systems. This is a problem that is partly addressed using @spice simulation #cite("ye_spice-compatible_2022"). However, especially with regards to digital co-simulation, @spice tools are often lacking, making the process difficult #cite("osti_1488489"), relying instead on alternatives such as @verilog-a.

In this work, a comprehensive solution to these problems will be offered by introducing a new way of designing photonic circuit using code, a novel way of simulating these circuits and a complete workflow for the design and programming of circuit will be presented. Finally, an extension of the simulation paradigm will be introduced, allowing for the co-simulation of the designs with digital electronics, which could, in time, be extended to analog electronics as well.

=== Research questions <research-questions>

The main goal of this work is to design a system to program photonic circuits, this entails the following:
+ How to express the user's intent?
  - What programming languages and paradigms are best suited?
  - What workflows are best suited?
  - How does the user test and verify their design?
+ How to translate that intent into a programmable @pic configuration?
  - What does a compiler need to do?
  - How to support future hardware platforms?
  - What are the unit operations that the hardware platform must support?
